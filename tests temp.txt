    def test_list(self):
        saleorder = SaleOrderFactory().create_sale_order()
        response = self.client.get(
            self.url + saleorder.no_sale_order + '/',
            format = 'json'
        )
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['no_sale_order'], saleorder.no_sale_order)
        self.assertEqual(response.data['publication_date'], saleorder.publication_date.strftime('%Y-%m-%d'))
        self.assertEqual(response.data['delivery_date'], saleorder.delivery_date.strftime('%Y-%m-%d'))
        self.assertEqual(response.data['doc_date'], saleorder.doc_date.strftime('%Y-%m-%d'))
        self.assertEqual(response.data['po_comments'], saleorder.po_comments)
        self.assertEqual(response.data['customer_name'], saleorder.customer_name)
        self.assertEqual(response.data['delivery_address'], saleorder.delivery_address)
        self.assertEqual(response.data['pay_term'], saleorder.pay_term.name)
        self.assertEqual(response.data['collection'], saleorder.collection.name)

def setUp(self):
        """Test that allows testing the registration and login of a user"""
        from sentry.registration.models import User, Rol
        from sentry.company.models import Company

        self.login_url = '/registration/login/'
        
        company = Company.objects.create(nit='1234', name='companytest', domain='co', address='co', country=faker.country(), region=faker.state(), city=faker.city())
        self.user = User.objects.create_superuser(
            username=faker.name(),
            email=faker.email(),
            first_name='First Name',
            last_name='Last Name',
            telephone='12345',
            company=company.id,
            password='Manage123'
        )

        response = self.client.post(
            self.login_url,
            {
                'username': self.user.username,
                'password': 'Manage123'
            },
            format='json'
        )

        self.assertEqual(response.status_code, status.HTTP_200_OK)

        self.token = response.data['access_token']
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token)
        return super().setUp()